Color palette
white: f7f7f2
light: e4e6c3
midtone: 899878
dark: 222735
black: 121113



TODO
[ ] - walk through backend

_____BACKEND_____

[x] - socket.on(session.start) this will be emitted once upon initial loading of app
	this is basically our app startup function. it feeds a bunch of data to the user
	[x] - add sockets/session.socket.js
		[x] - query db for rooms user is a member of
			returns array(rooms) of room objects {id, created_at, topic_id}
		[x] - query db for topics of rooms user is a member of
			returns array(topics) of topic objects {id, name}
		[x] - for each room of rooms
			[x] - break this off into a function? probably async?
			[x] - query db for room members | break this off into function?
				returns array(members) of room member objects {id, username}
				stored in room.members
			[x] - query db for room history (limit to some number of messages) | function?
				returns array(history) of message objects {id, author_id, room_id, text, created_at}
				stored in room.history
			[x] - socket.emit(room.joined) with room as payload
			[x] - socket.join(room.id) so socket now set to listen to all traffic for room
				[-] - REMOVED this only needs to be done during initial room joining, not during session start|include callback that does io.to(room.id).emit("member.joined") with payload of {user.id, user.name}
		[x] - once all rooms have been sent, send popular topics over
			[x] - query database for topics, join rooms, group by rooms, and get count of rooms for each topic
				order by room count descending limit 10
				store as popularTopics
			[x] - socket.emit("topic.popularTopics") with popularTopics as payload
		[x] - socket.emit("session.ready") this is the message to the client that everything has been received and they can start rendering the dom
[x] - sockets/topic.socket.js topic join refactor
	[x] - abstract message select query into function, store as room.history
	[x] - abstract member select query into function, store as room.members
	[x] - remove rooms selection statement. add data to room object.
	[x] - ensure room object has the following in all cases before emitting room.joined
		[x] - room.id
		[x] - room.created_at
		[x] - room.topic
		[x] - room.topic_id
		[x] - room.members
		[x] - room.history 
	[x] - remove individual emits, only do socket.emit(room.joined) with payload of room
	[x] - finish with socket.join(room.id)
		[x] - include callback of io.to(room.id).emit(member.joined) with payload of {user.id, user.name}
[ ] - sockets/index.js
	[ ] - remove member.getMembers. this will be handled in session.startup and by emitting member.joined
	[ ] - remove room.getRooms. this is handled in session.startup and topic join
	[ ] - remove room.listen. this is handled in session.startup and topic join
	[ ] - add room.leave to remove user from room
		[ ] - socket.emit room.left with payload of room_id
[ ] - sockets/message.socket.js
	[ ] - remove getMessages function. this is handled in session.startup and topic.join now
[ ] - remove sockets/member.socket.js. all functionality handled in session.startup and topic.join. 
[ ] - remove sockets/room.socket.js. all functionality handled in session.startup and topic.join


		
	______FRONTEND______
[x] - on OPEN_SOCKET saga, socket.emit(session.startup) to request data from server
[x] - add statusReducer. this stores the status of the session. set to "OKAY" on session ready. 
	[x] - add socket.on(session.ready) to handle this change. it should dispatch SET_STATUS, payload: 'OKAY'
[x] - add conditional render to Main.js to show a loading spinner until state.status is "OKAY"
[x] - change socket.on(room.joined) to send data as payload
[x] - socket.on(room.joined) saga
	[x] - dispatch(ADD_ROOM, {id, created_at, topic_id})
		[x] - in roomsReducer, add object to state(array)
	[x] - dispatch(ADD_TOPIC, {topic_id, topic})
		[x] - in topicsReducer, add topic to newState(object) as newState[topic_id] = topic
			- eg. the idea is to make the topic name accessible as state.topics[7] to get the text version of topic id 7
	[x] - dispatch(ADD_MEMBER_LIST, {room_id, [room.members]})
		[x] - in memberListsReducer[NEW], add member list to newState(object) as newState[room_id] = room.members
			- the idea is to make the whole list of members for room 42 available at state.memberLists[42]
	[x] - dispatch(ADD_HISTORY, {room_id, [room.history]}) 
		[x] - in historiesReducer[NEW], add history to newState(object) as newState[room_id] = room.history
			- the idea is to make the message history for room 42 available at state.histories[42]

[ ] - remove messages saga and reducer, change histories reducer to handle socketInbound dispatches
[ ] - change chat component to read from state.histories[room] where room is the room id stored in state.currentRoom
[ ] - remove members saga and reducer, change memberLists reducer to handle socketInbound dispatches
[ ] - change member list to read from state.memberLists[room] where room is the room id stored in state.currentRoom 
[ ] - add button to leave room
	[ ] - dispatch (LEAVE_ROOM) with payload of room_id
		[ ] - socketOutbound add leave room saga
[ ] - socketInbound add socket.on(room.left) 
	[ ] - dispatch (REMOVE_ROOM) with payload (data)
	[ ] - dispatch (REMOVE_MEMBER_LIST) with payload (data)
	[ ] - dispatch (REMOVE_HISTORY) with payload (data)